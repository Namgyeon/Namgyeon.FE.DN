---
layout: post
title:  "탐욕 알고리즘"
---

## 배낭 채우기 문제
훔친 물건을 넣어 둘 배낭이 있다고 하자. 그 배낭에는 총 35파운드의 무게까지만 담을 수 있다,
배낭에 넣을 물건의 가격의 합을 최대한 크게 하고자 한다. 어떤 알고리즘을 써야 할까?
탐욕 알고리즘 사용.

1. 가방에 들어갈 수 있는 것 중에서 가장 비싼 물건을 고른다.
2. 그 다음으로 가방에 들어갈 수 있는 물건중에 가장 비싼 것을 고른다. 이 일을 반복한다.
하지만 알고리즘이 제대로 작동하지 않는다.
A: $3000, 30lbs   B: $2000, 20lbs    C: $1500, 15lbs
배낭에는 35파운드까지만 들어간다. A가 가장 비싸니 A를 훔친다. 하지만 그러면 다른 것을 넣을 수가 없다.
훔친 물건의 총 가치는 $3000이다. 하지만 A대신 B와 C를 훔친다면 $3500이 된다.
탐욕 알고리즘은 올바른 답을 내지 못했다. 하지만 구현이 간단하면서 정답에 상당히 가까운 답을 준다.
다른 예시를 더보자.

## 집합 커버링 문제
미국에서 라디오 쇼를 한다고 가정하자. 미국은 50개의 주에서 전국의 모든 사람들이 최소한 한 번은 쇼를
들을 수 있도록 하려면 어떤 방송국을 방문해야 할지 계산해야 한다. 또 방송국을 방문하여 한 번 쇼를 하는데
돈이 들기 때문에 최대한 적은 수의 방송국을 돌아야 한다.

1. 가능한 모든 방송국의 부분 집합을 나열한다. 이것을 멱집합이라고 한다. 가능한 부분 집합의 수는 2^n개 이다.
2. 이 부분 집합중에 50개 주 전체를 커버할 수 있으면서 가장 원소의 수가 적은 부분 집합을 고른다.

문제는 모두 가능한 부분 집합을 계산하는 데 시간이 많이 걸린다. 부분 집합의 수가 2^n이기 때문에 O(2^n) 시간이 걸린다.
이 문제에 대해 충분히 빠른 속도를 가진 알고리즘은 존재하지 않는다. 그럼 어떻게 해야 할까?

탐욕 알고리즘(근사 알고리즘)을 사용한다. 탐욕 알고리즘은 거의 정답과 비슷한 답을 유추한다.
1. 아직 방송하지 않은 지역 중 가장 많은 지역에 방송할 수 있는 방송국을 고른다. 이미 방송되고 있는 지역이 일부 포함되어 있어도 상관없다.
2. 모든 주에 방송이 될 때까지 선택을 반복한다.
이것을 근사 알고리즘이라고 한다. 정확한 답을 계산하는데 시간이 너무 많이 걸린다면 근사 알고리즘을 사용할 수 있다.
근사 알고리즘의 성능은 다음 두 가지로 판단한다.
• 얼마나 빠른가
• 최적해에 얼마나 가까운가
집합은 리스트와 비슷하지만 중복을 허용하지 않는다.

❇︎ NP-완전 문제: 모든 가능한 경우를 다 따져서 최단/최소를 구해야 한다는 것.
NP-완전 문제라는 것을 알아냈다면 그 시점에서 문제를 완벽하게 풀려는 노력을 멈추고 근사 알고리즘을 쓰는 것이 좋다.
