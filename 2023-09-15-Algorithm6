---
layout: post
title:  "너비 우선 탐색"
---

## 그래프
그래프란 연결의 집합을 모형화한 것이다.
🀰(정점) →(간선) 🀰(정점)  그래프는 정점과 간선으로 이루어져있다.
정점은 여러 개의 다른 정점과 바로 이어질 수 있다.

## 너비 우선 탐색
너비 우선 탐색은 그래프를 대상으로 하는 다른 종류의 탐색 알고리즘이다.
너비 우선 탐색은 다음 두가지 종류의 질문에 대답하는데 도움이 된다.
1. 정점 A에서 정점 B로 가는 경로가 존재하는가?
2. 정점 A에서 정점 B로 가는 최단 경로는 무엇인가?
-미완-

......

## 큐
큐(대기열)는 실생활에서와 똑같이 동작한다.
친구와 버스 정류장에서 줄을 서 있다고 가정하자. 만약 내가 친구 앞에 서 있으면 버스를 먼저 타게 된다.
큐도 마찬가지이다. 큐에는 삽입과 제거라고 하는 두 가지 연산이 있다. 
만약 내가 목록에 두 개의 항목을 삽입하면 두 번째로 삽입된 항목보다 첫 번쨰로 삽입된 항목이 먼제 제거 된다.
선입 선출 자료구조이다. 반대로 스택은 후입 선출 자료구조이다.

## 그래프의 구현
그래프는 몇 개의 정점으로 이루어져있다. 그리고 각각의 정점은 이웃하는 정점과 연결된다.
"여러분 → 밥"과 같은 관계를 어떻게 표현할까? 관계를 표시하는 자료구조 해시 테이블을 사용한다.
파이썬 코드
graph = {}
graph["you"] = ["alice", "bob", "claire"]
그래프는 여러 개의 정점과 간선이 모여 있는 것에 불과하다. 더 큰 그래프는 어떻게 표현할까?
파이썬 코드
graph = {}
graph["you"] = ["alice", "bob", "claire"]
graph["bob"] = ["anuj", "peggy"]
graph["alice"] = ["peggy"]
graph["claire"] = ["thom", "jonny"]
graph["anuj"] = []
graph["peggy"] = []
graph["thom"] = []
graph["jonny"] = []
한번 그래프를 그려 표현해 보자.

키/값 쌍들을 넣을 때 순서는 중요할까? 중요하지 않다. 해시 테이블은 순서를 가지지 않기 떄문에.
방향 그래프에서 방향을 향하는 쪽은 이웃이되지만 방향이 없는 것은 이웃이 되지 못한다.
무방향 그래프는 서로 이어져 있다면 이웃이 된다.
