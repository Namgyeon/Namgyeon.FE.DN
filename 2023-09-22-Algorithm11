---
layout: post
title:  "더 공부해야 할 것"
---

## 트리

이진 탐색 트리
        10
       /  \
      5   15
     / \    \
    3   7    20
모든 정점에 대해 왼쪽에는 더 작은 값을 가진 정점, 오른쪽에는 더 큰 값을 가진 정점이 온다.
이진 탐색 트리에서 항목을 찾으려면 평균적으로 O(log n) 시간이 걸리고, 최악의 경우에 O(n) 시간이 걸린다.
정렬된 배열에서는 최악의 경우에도 O(log n) 시간이 걸린다. 결과적으로 정렬된 배열이 더 낫긴 하지만,
이진 탐색 트리는 항목을 삽입하거나 삭제할 때도 평균적으로 훨씬 빠르다.
단점도 있다. 임의 접근을 할 수 없다는 것이다. 예를 들어, "이 트리의 5번째 원소를 주세요."라고 말할 수 없다.
또 평균적인 성능이 트리가 얼마나 균형 잡혀있는가에 따라 달라진다.

## 병렬 알고리즘

알고리즘을 더 빨리 동작시키고 싶다면 여러 개의 코어에서 동시에 돌아가도록 병렬 실행을 하면 된다.
병렬 알고리즘은 설계하기가 어렵다. 그리고 올바르게 동작하는지, 어느 정도의 속도 향상을 얻을 수 있는지 정확하게 파악하기도 어렵다.
한가지 확실한 것은 속도 향상이 선형적이지 않다는 것이다. 그러므로 한 개의 코어가 아니라 두 개의 코어에서 알고리즘을
돌린다고 하더라도 마법처럼 두 배로 빨라지지는 않다. 이렇게 되는 몇가지 이유가 있다.
• 병렬화를 관리하는 데 들어가는 부담
• 로드 밸런싱 : 10개의 작업을 해야 해서 두 개의 코어에 5개씩 작업을 나누어 주었다. 그런데 A코어는 쉬운 일만 받아서 10초 내에 끝내고
B코어는 어려운 일만 받아서 1분이 걸렸다. 두개의 코어에 일을 균등하게 배분하려면 어떻게 해야 할까?

